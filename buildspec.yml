version: 0.2

env:
  variables:
    AWS_REGION: "us-east-2"
    REACT_APP_API_SERVICE_URL: "http://localhost:5000"

phases: 
  install: 
    commands:
      - echo "Installing Docker..."
      - apt-get update
      # Download Docker Engine packages:
      - curl -fsSL https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/containerd.io_1.6.9-1_amd64.deb
      - curl -fsSL https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/docker-ce_26.1.4-1~ubuntu.22.04~jammy_amd64.deb
      - curl -fsSL https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/docker-ce-cli_26.1.4-1~ubuntu.22.04~jammy_amd64.deb
      - curl -fsSL https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/docker-buildx-plugin_0.14.1-1~ubuntu.22.04~jammy_amd64.deb
      - curl -fsSL https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/docker-compose-plugin_2.27.1-1~ubuntu.22.04~jammy_amd64.deb
      # Install the downloaded packages
      - dpkg -i "containerd.io_1.6.9-1_amd64.deb"
      - dpkg -i "docker-ce_26.1.4-1~ubuntu.22.04~jammy_amd64.deb"
      - dpkg -i "docker-ce-cli_26.1.4-1~ubuntu.22.04~jammy_amd64.deb"
      - dpkg -i "docker-buildx-plugin_0.14.1-1~ubuntu.22.04~jammy_amd64.deb"
      - dpkg -i "docker-compose-plugin_2.27.1-1~ubuntu.22.04~jammy_amd64.deb"
      # Remove the installer packages
      - rm -f "containerd.io_1.6.9-1_amd64.deb"
      - rm -f "docker-ce_26.1.4-1~ubuntu.22.04~jammy_amd64.deb"
      - rm -f "docker-ce-cli_26.1.4-1~ubuntu.22.04~jammy_amd64.deb"
      - rm -f "docker-buildx-plugin_0.14.1-1~ubuntu.22.04~jammy_amd64.deb"
      - rm -f "docker-compose-plugin_2.27.1-1~ubuntu.22.04~jammy_amd64.deb"
      - > 
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      - apt-get update
      - apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      # Check if Docker is installed and running
      - docker run hello-world
  pre_build:
    commands:
      - echo "Attempting to login to AWS ECR..."
      - >
        aws ecr get-login-password --region $AWS_REGION \
        | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  build:
    commands:
      - echo "Building images [dev]..."
      - docker-compose up -d --build
      - echo "Building images [prod]..."
      - >
        docker build \
        --no-cache \
        -f db/Dockerfile \
        -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-db:prod \
        ./db
      - >
        docker build \
        --no-cache \
        -f be/Dockerfile \
        -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-be:prod \
        ./be
      - >
        docker build \
        --no-cache \
        -f fe/Dockerfile \
        -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-fe:prod \
        --build-arg NODE_ENV=production \
        --build-arg REACT_APP_API_SERVICE_URL=$REACT_APP_API_SERVICE_URL \
        ./fe
  post_build:
    commands:
      - echo "Pushing [prod] images to AWS ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-db:prod
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-be:prod
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/twtr-fe:prod
